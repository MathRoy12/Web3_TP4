// <auto-generated />
using System;
using Jmepromeneavecmesvalises_API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Jmepromeneavecmesvalises_API.Migrations
{
    [DbContext(typeof(Jmepromeneavecmesvalises_APIContext))]
    [Migration("20231217022624_pasdIdee")]
    partial class pasdIdee
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Jmepromeneavecmesvalises_API.Models.Couverture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VoyageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VoyageId")
                        .IsUnique();

                    b.ToTable("Couverture");
                });

            modelBuilder.Entity("Jmepromeneavecmesvalises_API.Models.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VoyageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VoyageId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("Jmepromeneavecmesvalises_API.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "fc647606-84c1-11ee-b9d1-0242ac120002",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2d072823-6190-4b39-8155-1158f8904759",
                            Email = "admin@test.org",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@TEST.ORG",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEIw0yUej4mZBSbU9NiD9wsJLjKgWCHJK1CKbM+olIMMyP7uuvkC4XkevxjhLZkGEJw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "023ec7fb-9483-451a-a870-355b366c9112",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        },
                        new
                        {
                            Id = "fc647c64-84c1-11ee-b9d1-0242ac120002",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8a15410e-1d99-40d3-9f1f-1c451da49b94",
                            Email = "moi@test.org",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MOI@TEST.ORG",
                            NormalizedUserName = "MOI",
                            PasswordHash = "AQAAAAIAAYagAAAAEKg5mHZzkV9u+3ZIuHhZwmxk2gq/sKSFkM1VfBshyjXELrJziBK2beBC53FAPa2nUg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bdf64109-f0b6-4e7b-a607-0b7dce0fc98a",
                            TwoFactorEnabled = false,
                            UserName = "Moi"
                        },
                        new
                        {
                            Id = "fc647608-84c1-11ee-b9d1-0242ac120002",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a053c9c2-b3d1-42d6-a81c-7c1ec44c97e2",
                            Email = "toi@test.org",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "TOI@TEST.ORG",
                            NormalizedUserName = "TOI",
                            PasswordHash = "AQAAAAIAAYagAAAAEO54XVB83iGws6vrLLii1NU+MImnw1oO0RD27BeeqguU4IqrKjkBoS22Ao/w58Zffg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "503f5802-c9aa-4ed5-beff-0182092b2942",
                            TwoFactorEnabled = false,
                            UserName = "Toi"
                        });
                });

            modelBuilder.Entity("Jmepromeneavecmesvalises_API.Models.Voyage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Voyage");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Destination = "Séoul",
                            IsPublic = true
                        },
                        new
                        {
                            Id = 2,
                            Destination = "Tachkent",
                            IsPublic = true
                        },
                        new
                        {
                            Id = 3,
                            Destination = "Damas",
                            IsPublic = false
                        },
                        new
                        {
                            Id = 4,
                            Destination = "Kiev",
                            IsPublic = false
                        },
                        new
                        {
                            Id = 5,
                            Destination = "Jérusalem",
                            IsPublic = false
                        },
                        new
                        {
                            Id = 6,
                            Destination = "Pyongyang",
                            IsPublic = true
                        },
                        new
                        {
                            Id = 7,
                            Destination = "Moscou",
                            IsPublic = false
                        },
                        new
                        {
                            Id = 8,
                            Destination = "Kigali",
                            IsPublic = false
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("UserVoyage", b =>
                {
                    b.Property<string>("ProprietairesId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("VoyagesId")
                        .HasColumnType("int");

                    b.HasKey("ProprietairesId", "VoyagesId");

                    b.HasIndex("VoyagesId");

                    b.ToTable("UserVoyage");

                    b.HasData(
                        new
                        {
                            ProprietairesId = "fc647606-84c1-11ee-b9d1-0242ac120002",
                            VoyagesId = 1
                        },
                        new
                        {
                            ProprietairesId = "fc647c64-84c1-11ee-b9d1-0242ac120002",
                            VoyagesId = 2
                        },
                        new
                        {
                            ProprietairesId = "fc647608-84c1-11ee-b9d1-0242ac120002",
                            VoyagesId = 3
                        },
                        new
                        {
                            ProprietairesId = "fc647606-84c1-11ee-b9d1-0242ac120002",
                            VoyagesId = 4
                        },
                        new
                        {
                            ProprietairesId = "fc647c64-84c1-11ee-b9d1-0242ac120002",
                            VoyagesId = 5
                        },
                        new
                        {
                            ProprietairesId = "fc647608-84c1-11ee-b9d1-0242ac120002",
                            VoyagesId = 6
                        },
                        new
                        {
                            ProprietairesId = "fc647606-84c1-11ee-b9d1-0242ac120002",
                            VoyagesId = 7
                        },
                        new
                        {
                            ProprietairesId = "fc647c64-84c1-11ee-b9d1-0242ac120002",
                            VoyagesId = 8
                        });
                });

            modelBuilder.Entity("Jmepromeneavecmesvalises_API.Models.Couverture", b =>
                {
                    b.HasOne("Jmepromeneavecmesvalises_API.Models.Voyage", "Voyage")
                        .WithOne("Couverture")
                        .HasForeignKey("Jmepromeneavecmesvalises_API.Models.Couverture", "VoyageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Voyage");
                });

            modelBuilder.Entity("Jmepromeneavecmesvalises_API.Models.Photo", b =>
                {
                    b.HasOne("Jmepromeneavecmesvalises_API.Models.Voyage", "Voyage")
                        .WithMany("Photos")
                        .HasForeignKey("VoyageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Voyage");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Jmepromeneavecmesvalises_API.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Jmepromeneavecmesvalises_API.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Jmepromeneavecmesvalises_API.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Jmepromeneavecmesvalises_API.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UserVoyage", b =>
                {
                    b.HasOne("Jmepromeneavecmesvalises_API.Models.User", null)
                        .WithMany()
                        .HasForeignKey("ProprietairesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Jmepromeneavecmesvalises_API.Models.Voyage", null)
                        .WithMany()
                        .HasForeignKey("VoyagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Jmepromeneavecmesvalises_API.Models.Voyage", b =>
                {
                    b.Navigation("Couverture")
                        .IsRequired();

                    b.Navigation("Photos");
                });
#pragma warning restore 612, 618
        }
    }
}
